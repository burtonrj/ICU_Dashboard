theme(panel.background = element_rect(fill = "white",
colour = "grey50")) +
xlab('COVID-19 infected')
admissions %>%
ggplot(aes_string(x='covid19', y='`ICU Duration (hours)`')) +
geom_violin(aes(), alpha=0.1) +
#geom_dotplot(aes_string(fill='Unit_Outcome'),
#             binaxis='y',
#             stackdir = 'centerwhole',
#             stackgroups = TRUE,
#             binpositions = 'all')
geom_jitter(aes(fill=Unit_Outcome),
width=0.1,
height=0.1,
shape = 21,
size=2,
alpha=0.8) +
theme(panel.background = element_rect(fill = "white",
colour = "grey50")) +
xlab('COVID-19 infected')
admissions %>%
ggplot(aes_string(x='covid19', y='`ICU Duration (hours)`')) +
geom_violin(aes(), alpha=0.1) +
#geom_dotplot(aes_string(fill='Unit_Outcome'),
#             binaxis='y',
#             stackdir = 'centerwhole',
#             stackgroups = TRUE,
#             binpositions = 'all')
geom_jitter(aes(fill=Unit_Outcome),
width=0.1,
height=0.01,
shape = 21,
size=2,
alpha=0.8) +
theme(panel.background = element_rect(fill = "white",
colour = "grey50")) +
xlab('COVID-19 infected')
admissions %>%
ggplot(aes_string(x='covid19', y='`ICU Duration (hours)`')) +
geom_violin(aes(), alpha=0.1) +
#geom_dotplot(aes_string(fill='Unit_Outcome'),
#             binaxis='y',
#             stackdir = 'centerwhole',
#             stackgroups = TRUE,
#             binpositions = 'all')
geom_jitter(aes(fill=Unit_Outcome),
width=0.1,
height=0,
shape = 21,
size=2,
alpha=0.8) +
theme(panel.background = element_rect(fill = "white",
colour = "grey50")) +
xlab('COVID-19 infected')
runApp()
runApp()
runApp()
shapiro.test(as.numeric(unlist(admissions['age'])))
covid <- as.numeric(unlist(admissions %>%
filter(covid19 == 'Yes') %>%
select("age")))
covid
not_covid <- as.numeric(unlist(admissions %>%
filter(covid19 == 'No') %>%
select("age")))
not_covid
st.p.val <- shapiro.test(covid)
st.p.val
st.p.val <- shapiro.test(covid)$p.value
st.p.val
not.covid.p <- shapiro.test(not.covid)$p.value
not.covid <- as.numeric(unlist(admissions %>%
filter(covid19 == 'Yes') %>%
select("age")))
covid.p <- shapiro.test(covid)$p.value
not.covid.p <- shapiro.test(not.covid)$p.value
not.covid.p
not.covid <- as.numeric(unlist(admissions %>%
filter(covid19 == 'No') %>%
select("age")))
not.covid.p <- shapiro.test(not.covid)$p.value
not.covid.p
not.covid.p <= 0.05
round(not.covid.p)
round(not.covid.p, digits = 2)
round(not.covid.p, digits = 2) <= 0.05
norm <- covid.p <= 0.05 & not.covid.p <= 0.05
norm
covid.p <- round(shapiro.test(covid)$p.value, digits=2)
not.covid.p <- round(shapiro.test(not.covid)$p.value, digits=2)
norm <- covid.p <= 0.05 & not.covid.p <= 0.05
norm
var.test(covid, not_covid, alternative = "two.sided")
var.test(covid, not_covid, alternative = "two.sided")$p.value
p.val <- t.test(covid, not.covid, var.equal = TRUE)$p.value
p.val
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinythemes)
library(tidyverse)
library(readxl)
library(lubridate)
library(testit)
library(plotly)
source('etl_module.R')
admissions[covid19 == 'Yes']
admissions[admissions$covid19 == 'Yes']
admissions[.covid19 == 'Yes']
str_replace('`ICU`', '`', '')
gsub('`ICU`', '`', '')
gsub('`', '', '`ICU`')
runApp()
y <- "DaysVentilated"
y <- gsub("`", "", y)
y
covid <- as.numeric(unlist(admissions %>%
filter(covid19 == 'Yes') %>%
select(y)))
not.covid <- as.numeric(unlist(admissions %>%
filter(covid19 == 'No') %>%
select(y)))
covid
not.covid
covid.norm.p <- round(shapiro.test(covid)$p.value, digits=2)
not.covid.norm.p <- round(shapiro.test(not.covid)$p.value, digits=2)
covid.norm.p
shapiro.test(covid)$p.value
runApp()
y
covid <- as.numeric(unlist(admissions %>%
filter(covid19 == 'Yes') %>%
select(y)))
not.covid <- as.numeric(unlist(admissions %>%
filter(covid19 == 'No') %>%
select(y)))
# Perform unpaied Mann Whitney
stats <- mann.whit(covid, not.covid)
mann.whit <- function(x, y){
return(list("method"="Two-tailed Mann-Whitney test",
"p.value"=wilcox.test(x, y, alternative = "two.sided")$p.value))
}
# Perform unpaied Mann Whitney
stats <- mann.whit(covid, not.covid)
stats
runApp()
runApp()
runApp()
runApp()
runApp()
admissions %>%
ggplot(aes_string(x='age', fill='covid19')) +
geom_density(alpha=0.5, adjust=0.5) +
scale_fill_manual(values=c('grey', 'red'),
labels=c('No', 'Yes')) +
ylab('') +
scale_x_continuous(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0)) +
theme(panel.background = element_rect(fill = "white",
colour = "grey50"))
admissions %>%
ggplot(aes_string(x='age', fill='covid19')) +
geom_density(alpha=0.5, adjust=0.5) +
scale_fill_manual(values=c('grey', 'red'),
labels=c('No', 'Yes')) +
ylab('') +
scale_x_continuous(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0)) +
theme(panel.background = element_rect(fill = "white",
colour = "grey50"))
admissions %>%
ggplot(aes_string(x='age', fill='covid19')) +
geom_density(alpha=0.5, adjust=0.5) +
scale_fill_manual(values=c('grey', 'red'),
labels=c('No', 'Yes')) +
ylab('') +
scale_x_continuous(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0)) +
theme(panel.background = element_rect(fill = "white",
colour = "grey50"))
admissions %>%
ggplot(aes_string(x='age')) +
geom_density(alpha=0.5, adjust=0.5) +
ylab('') +
scale_x_continuous(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0)) +
theme(panel.background = element_rect(fill = "white",
colour = "grey50"))
admissions %>%
ggplot(aes_string(x='age', fill='covid19')) +
geom_density(alpha=0.5, adjust=0.5) +
ylab('') +
scale_x_continuous(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0)) +
theme(panel.background = element_rect(fill = "white",
colour = "grey50"))
admissions %>%
ggplot(aes_string(x='age', fill='covid19')) +
geom_density(alpha=0.5, adjust=1) +
ylab('') +
scale_x_continuous(expand=c(0,0)) +
scale_y_continuous(expand=c(0,0)) +
theme(panel.background = element_rect(fill = "white",
colour = "grey50"))
runApp()
colnames(admissions)
runApp()
install.packages(c("survival", "survminer"))
admissions$`ICU Duration (hours)`
library("survminer")
library("survival")
admissions
admissions$Hosp_Outcome
admissions$Unit_Outcome
admissions$Hosp_Outcome
grepl("Died", "4. Died", fixed=TRUE)
grepl("Died", "2. Died", fixed=TRUE)
grepl("Died", "2. Lived", fixed=TRUE)
surv <- function(x){
if(is.na(x)){
return(1)
}else if(grepl("Died", x, fixed=TRUE)){
return(2)
}else{
return(0)
}
}
admissions$ICUSurvival <- unlist(map(admissions$Unit_Outcome,
surv))
admissions$HospSurvival <- unlist(map(admissions$Hosp_Outcome,
surv))
admissions$ICUSurvival
admissions$HospSurvival
colnames(admissions)
admissions$`Hosp Duration (hours)` <- with(admissions,
difftime(Hosp_Disch_Date,
ICUAdmit,
units="hours"))
admissions$`Hosp Duration (hours)`
admissions$`Hosp Duration (days)` <- with(admissions,
difftime(Hosp_Disch_Date,
ICUAdmit,
units="days"))
admissions$`Hosp Duration (days)`
admissions$`Hosp Duration (days)` <- round(with(admissions,
difftime(Hosp_Disch_Date,
ICUAdmit,
units="days")),
digits=1)
admissions$`Hosp Duration (days)`
admissions$`Hosp Duration (days)` <- round(with(admissions,
difftime(Hosp_Disch_Date,
ICUAdmit,
units="days")),
digits=0)
admissions$`Hosp Duration (days)`
Sys.Date()
calc.duration <- function(a, b, units="hours"){
if(is.na(b) == FALSE){
diff <- difftime(b, a, units=units)
}else{
diff <- difftime(Sys.Date(), a, units=units)
}
if(diff < 0){
print("Warning: negative duration, returning NA")
return(NA)
}
}
map2(admissions$`ICU Duration (hours)`,)
map2(admissions$ICUDischarge, admissions$ICUAdmit,
calc.duration)
calc.duration <- function(a, b, units="hours"){
if(is.na(b) == FALSE){
diff <- difftime(b, a, units=units)
}else{
diff <- difftime(Sys.Date(), a, units=units)
}
if(is.na(diff)){
return(NA)
}
if(diff < 0){
print("Warning: negative duration, returning NA")
return(NA)
}
}
map2(admissions$ICUDischarge, admissions$ICUAdmit,
calc.duration)
calc.duration <- function(a, b, units="hours"){
if(is.na(b) == FALSE){
diff <- difftime(b, a, units=units)
print(diff)
}else{
diff <- difftime(Sys.Date(), a, units=units)
}
if(is.na(diff)){
return(NA)
}
if(diff < 0){
print("Warning: negative duration, returning NA")
return(NA)
}
}
map2(admissions$ICUDischarge, admissions$ICUAdmit,
calc.duration)
x<-map2(admissions$ICUDischarge, admissions$ICUAdmit,
calc.duration)
x<-map2(admissions$ICUAdmit, admissions$ICUDischarge,
calc.duration)
calc.duration <- function(a, b, units="hours"){
if(is.na(b) == FALSE){
diff <- difftime(b, a, units=units)
}else{
diff <- difftime(Sys.Date(), a, units=units)
}
if(is.na(diff)){
return(NA)
}
if(diff < 0){
print("Warning: negative duration, returning NA")
return(NA)
}
}
map2(admissions$ICUAdmit, admissions$ICUDischarge,
calc.duration)
x<-map2(admissions$ICUAdmit, admissions$ICUDischarge,
calc.duration)
calc.duration <- function(a, b, units="hours"){
if(is.na(b) == FALSE){
diff <- difftime(b, a, units=units)
}else{
diff <- difftime(Sys.Date(), a, units=units)
}
if(is.na(diff)){
print(diff)
return(NA)
}
if(diff < 0){
print("Warning: negative duration, returning NA")
return(NA)
}
}
x<-map2(admissions$ICUAdmit, admissions$ICUDischarge,
calc.duration)
calc.duration <- function(a, b, units="hours"){
if(is.na(b) == FALSE){
diff <- difftime(b, a, units=units)
}else{
diff <- difftime(Sys.Date(), a, units=units)
}
print(diff)
if(is.na(diff)){
return(NA)
}
if(diff < 0){
print("Warning: negative duration, returning NA")
return(NA)
}
}
x<-map2(admissions$ICUAdmit, admissions$ICUDischarge,
calc.duration)
calc.duration <- function(a, b, units="hours"){
if(is.na(b) == FALSE){
diff <- difftime(b, a, units=units)
}else{
diff <- difftime(Sys.Date(), a, units=units)
}
if(is.na(diff)){
return(NA)
}
if(diff < 0){
print("Warning: negative duration, returning NA")
return(NA)
}
return(diff)
}
x<-map2(admissions$ICUAdmit, admissions$ICUDischarge,
calc.duration)
x
unlist(x)
f <- partial(calc.duration, units="days")
admissions$`Hosp Duration (days)` <- unlist(map2(admissions$ICUAdmit,
admissions$Hosp_Disch_Date,
f))
admissions$`ICU Duration (hours)` <- unlist(map2(admissions$ICUAdmit,
admissions$ICUDischarge,
calc.duration))
library(shiny)
library(shinythemes)
library(tidyverse)
library(readxl)
library(lubridate)
library(testit)
library(plotly)
source('etl_module.R')
library(shiny)
library(shinythemes)
library(tidyverse)
library(readxl)
library(lubridate)
library(testit)
library(plotly)
source('etl_module.R')
View(admissions)
fit <- survfit(Surv(`ICU Duration (hours)`, ICUSurvival) ~ covid19,
data = admissions)
admissions$ICUSurvival
print(fit)
fit <- survfit(Surv(`ICU Duration (hours)`, ICUSurvival) ~ covid19,
data = admissions)
fit <- survfit(Surv(`ICU Duration (hours)`, ICUSurvival, type="right") ~ covid19,
data = admissions)
Surv(`ICU Duration (hours)`, ICUSurvival, type="right")
typeof(admissions$ICUSurvival)
data("lung")
fit <- survfit(Surv(time, status) ~ sex, data = lung)
typeof(lung$status)
lung$status
library(shiny)
library(shinythemes)
library(tidyverse)
library(readxl)
library(lubridate)
library(testit)
library(plotly)
source('etl_module.R')
# Fixed variables
fit <- survfit(Surv(`ICU Duration (hours)`, ICUSurvival) ~ covid19,
data = admissions)
print(fit)
summary(fit)
fit <- survfit(Surv(`ICU Duration (hours)`, ICUSurvival) ~ covid19,
data = admissions)
ggsurvplot(fit,)
ggsurvplot(fit,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF"))
admissions$`Hosp Duration (days)`
admissions$HospSurvival
fit <- survfit(Surv(`Hosp Duration (days)`, HospSurvival) ~ covid19,
data = admissions)
ggsurvplot(fit,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF"))
print(fit)
ggplotly(ggsurvplot(fit,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF")))
res.cox <- coxph(Surv(`Hosp Duration (days)`,
HospSurvival) ~ covid19,
data = admissions)
res.cox
summary(res.cox)
covid <- admissions %>% filter(covid19 == 'Yes')
fit <- survfit(Surv(`Hosp Duration (days)`, HospSurvival) ~ age,
data = covid)
print(fit)
fit <- survfit(Surv(`Hosp Duration (days)`, HospSurvival) ~ sex,
data = covid)
print(fit)
ggsurvplot(fit,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF"))
ggsurvplot(survfit(res.cox), color = "#2E9FDF",
ggtheme = theme_minimal())
res.cox <- coxph(Surv(`Hosp Duration (days)`,
HospSurvival) ~ covid19,
data = admissions)
ggsurvplot(survfit(res.cox), color = "#2E9FDF",
ggtheme = theme_minimal())
res.cox <- coxph(Surv(`Hosp Duration (days)`,
HospSurvival) ~ covid19 + age + sex,
data = admissions)
res.cox
colnames(admissions)
res.cox <- coxph(Surv(`Hosp Duration (days)`,
HospSurvival) ~ covid19 + age + 'sex',
data = admissions)
fit <- survfit(Surv(input$kap.time,
input$kap.survtype) ~ 'sex',
data = covid)
fit <- survfit(Surv(input$kap.time,
input$kap.survtype) ~ `'sex'`,
data = covid)
res.cox <- coxph(Surv(`Hosp Duration (days)`,
HospSurvival) ~ covid19 + age + `'sex'`,
data = admissions)
