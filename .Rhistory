# Occupancy
expected <-  c("Date","covid","LOC_0100", "LOC_0200", "LOC_0300",
"LOC_0400", "LOC_0500","LOC_0600","LOC_0700", "LOC_0800",
"LOC_0900", "LOC_1000", "LOC_1100", "LOC_1200","LOC_1300",
"LOC_1400", "LOC_1500", "LOC_1600", "LOC_1700", "LOC_1800",
"LOC_1900","LOC_2000", "LOC_2100", "LOC_2200", "LOC_2300",
"LOC_2400")
assert("Column names for occupancy does not match expected",
expected == colnames(occ))
##### Formatting
# Admissions - datetime
dt_cols <- c("ICUAdmit", "ICUDischarge")
d_cols <- c("Hosp_Disch_Date")
admissions <- mutate_at(admissions, dmy_hms, .vars=dt_cols)
admissions <- mutate_at(admissions, dmy, .vars=d_cols)
admissions$ICUAdmit
admissions$ICUDischarge
admissions$Hospital_Number
admissions$Hosp_Disch_Date
##### Load Data
admissions <- read_excel('data.xlsx', sheet = 'admissions')
dmy(admissions$Hosp_Disch_Date)
admissions$Hosp_Disch_Date
ymd(admissions$Hosp_Disch_Date)
source('~/ICU_Dashboard/playground.R', echo=TRUE)
admission
admissions
admissions$DaysVentilated
admissions$Leukaemia
source('~/ICU_Dashboard/playground.R', echo=TRUE)
admissions$sex
admissions$Unit_Outcome
runApp()
runApp()
View(occ)
View(admissions)
occ
occ %>% group_by(occ$Date)
occ$Data
library(shiny)
library(tidyverse)
library(readxl)
library(lubridate)
library(testit)
source('etl_module.R')
View(occ)
occ
occ %>% group_by(Date) %>% count(LOC_0100)
gather(occ, "Date", "Time")
gather(occ, "Date", "Time", c(1,3:26))
gather(occ, "Date", "Time", c(1,3:27))
gather(occ, "Date", "Time", c(1,3:26))
gather(occ, "Date", "Time", c(1,2:26))
gather(occ, "Date", "Time", c(1,3:26))
gather(occ, "Date", "Time", c(1,5:26))
gather(occ, "Date", "Time", c(1,2:26))
gather(occ, "Date", "Time"
)
occ$Date
gather(occ)
gather(occ, 1)
gather(occ, 'Hour', 'Value', 3:)
gather(occ, 'Hour', 'Value', 3:27)
gather(occ, 'Hour', 'Value', 3:26)
gather(occ, 'Hour', 'CareLevel', 3:26) %>% select(c('Date', 'Hour', 'CareLevel', 'covid'))
occ <- gather(occ, 'Hour', 'CareLevel', 3:26) %>% select(c('Date', 'Hour', 'CareLevel', 'covid'))
hm(0100)
'LOC_0100'[4:6]
'LOC_0100'
time <- "LOC_0100"
time[4]
substr("LOC_0100", 4, 8)
substr("LOC_0100", 5, 8)
as.numeric(substr("LOC_0100", 5, 8))
substr("LOC_0100", 6, 8)
substr("LOC_0100", 7, 8)
substr("LOC_0100", 5, 6)
paste("01", "00", sep=":")
hm(paste("01", "00", sep=":"))
time <- hm(paste("01", "00", sep=":"))
date <- ymd("2020-12-04")
date
paste(date, time)
typeof(paste(date, time))
ymd_hms(paste(date, time))
library(shiny)
library(tidyverse)
library(readxl)
library(lubridate)
library(testit)
##### Load Data
admissions <- read_excel('data.xlsx', sheet = 'admissions')
occ <- read_excel('data.xlsx', sheet = 'occupancy')
##### Variable check
# Admissions
expected <- c("Unit","NHS_Number","Hospital_Number","covid19","ICUAdmit","ICUDischarge",
"Unit_Outcome","Hosp_Disch_Date","Hosp_Outcome","age","sex","height",
"weight","AP2","HIV/AIDS","Cancer","Chemotherapy","ChronicHeart",
"ChronicRenal","ChronicResp","LiverCirrhosis","Home_Ventilate",
"Immunosup","Leukaemia","Leukaemia_Chron","Lymphoma","Portal_Hyper",
"Radiotherapy","MechanicalVentilation","DaysVentilated","RenalRT")
assert("Column names for admissions does not match expected",
expected == colnames(admissions))
# Occupancy
expected <-  c("Date","covid","LOC_0100", "LOC_0200", "LOC_0300",
"LOC_0400", "LOC_0500","LOC_0600","LOC_0700", "LOC_0800",
"LOC_0900", "LOC_1000", "LOC_1100", "LOC_1200","LOC_1300",
"LOC_1400", "LOC_1500", "LOC_1600", "LOC_1700", "LOC_1800",
"LOC_1900","LOC_2000", "LOC_2100", "LOC_2200", "LOC_2300",
"LOC_2400")
assert("Column names for occupancy does not match expected",
expected == colnames(occ))
##### Formatting
# Admissions - datetime
dt_cols <- c("ICUAdmit", "ICUDischarge")
d_cols <- c("Hosp_Disch_Date")
admissions <- mutate_at(admissions, dmy_hms, .vars=dt_cols)
admissions <- mutate_at(admissions, ymd, .vars=d_cols)
# Admissions - chr columns
c_cols <- c("Unit", "Hospital_Number")
admissions <- mutate_at(admissions, as.character, .vars=c_cols)
# Admissions - int columns
i_cols <- c("NHS_Number", "age", "height",
"weight", "AP2", "DaysVentilated",
"RenalRT")
admissions <- mutate_at(admissions, as.numeric, .vars=i_cols)
# Admissions - factors
not_f_cols <- unlist(list(d_cols, dt_cols, c_cols, i_cols))
f_cols <- setdiff(colnames(admissions), not_f_cols)
admissions <- mutate_at(admissions, as.factor, .vars=f_cols)
# Occupancy
occ$Date <- ymd(occ$Date)
c <- colnames(occ)
c <- c[c != "Date"]
occ <- mutate_at(occ, as.integer, .vars=c)
##### Wrangle
# Occupancy
process_datetime <- function(date, time){
time <- paste(substr(time, 5, 6),
substr(time, 7, 8),
sep=":")
return(ymd_hms(paste(date, hm(time))))
}
occ <- gather(occ, 'Time', 'CareLevel', 3:26) %>%
select(c('Date', 'Time', 'CareLevel', 'covid'))
occ$DateTime <- map2(occ$Date, occ$Time)
occ$DateTime <- map2(occ$Date, occ$Time, process_datetime)
occ
map2(occ$Date, occ$Time, process_datetime)
map2(occ$Date[0:5], occ$Time[0:5], process_datetime)
unlist(map2(occ$Date[0:5], occ$Time[0:5], process_datetime))
do.call(map2(occ$Date[0:5], occ$Time[0:5], process_datetime))
do.call("c", map2(occ$Date[0:5], occ$Time[0:5], process_datetime))
occ$DateTime <- do.call("c", map2(occ$Date, occ$Time, process_datetime))
do.call("c", map2(occ$Date, occ$Time, process_datetime))
unlist(map2(occ$Date, occ$Time, process_datetime))
process_datetime <- function(date, time){
time <- paste(substr(time, 5, 6),
substr(time, 7, 8),
sep=":")
return(paste(date, time, sep=" "))
}
unlist(map2(occ$Date, occ$Time, process_datetime))
occ$DateTime <- unlist(map2(occ$Date, occ$Time, process_datetime))
occ
occ$DateTime <- yhd_hm(occ$DateTime)
occ$DateTime <- ymd_hm(occ$DateTime)
occ
occ <- occ $>$ select(c('DateTime', 'CareLevel', 'covid'))
occ <- occ %>% select(c('DateTime', 'CareLevel', 'covid'))
occ
occ %>% group_by(DateTime) %>% coutn(CareLevel)
occ %>% group_by(DateTime) %>% count(CareLevel)
occ %>% group_by(DateTime) %>% count(covid)
replace_na(occ$covid, 0)
occ$covid <- replace_na(occ$covid, 0)
occ
occ %>% group_by(DateTime) %>% count(CareLevel)
drop_na(occ)
occ <- drop_na(occ)
occ %>% group_by(DateTime) %>% count(CareLevel)
occ %>% filter(DateTime == ymd_hms("2020-03-17 24:00:00"))
library(shiny)
library(tidyverse)
library(readxl)
library(lubridate)
library(testit)
##### Load Data
admissions <- read_excel('data.xlsx', sheet = 'admissions')
occ <- read_excel('data.xlsx', sheet = 'occupancy')
##### Variable check
# Admissions
expected <- c("Unit","NHS_Number","Hospital_Number","covid19","ICUAdmit","ICUDischarge",
"Unit_Outcome","Hosp_Disch_Date","Hosp_Outcome","age","sex","height",
"weight","AP2","HIV/AIDS","Cancer","Chemotherapy","ChronicHeart",
"ChronicRenal","ChronicResp","LiverCirrhosis","Home_Ventilate",
"Immunosup","Leukaemia","Leukaemia_Chron","Lymphoma","Portal_Hyper",
"Radiotherapy","MechanicalVentilation","DaysVentilated","RenalRT")
assert("Column names for admissions does not match expected",
expected == colnames(admissions))
# Occupancy
expected <-  c("Date","covid","LOC_0100", "LOC_0200", "LOC_0300",
"LOC_0400", "LOC_0500","LOC_0600","LOC_0700", "LOC_0800",
"LOC_0900", "LOC_1000", "LOC_1100", "LOC_1200","LOC_1300",
"LOC_1400", "LOC_1500", "LOC_1600", "LOC_1700", "LOC_1800",
"LOC_1900","LOC_2000", "LOC_2100", "LOC_2200", "LOC_2300",
"LOC_2400")
assert("Column names for occupancy does not match expected",
expected == colnames(occ))
##### Formatting
# Admissions - datetime
dt_cols <- c("ICUAdmit", "ICUDischarge")
d_cols <- c("Hosp_Disch_Date")
admissions <- mutate_at(admissions, dmy_hms, .vars=dt_cols)
admissions <- mutate_at(admissions, ymd, .vars=d_cols)
# Admissions - chr columns
c_cols <- c("Unit", "Hospital_Number")
admissions <- mutate_at(admissions, as.character, .vars=c_cols)
# Admissions - int columns
i_cols <- c("NHS_Number", "age", "height",
"weight", "AP2", "DaysVentilated",
"RenalRT")
admissions <- mutate_at(admissions, as.numeric, .vars=i_cols)
# Admissions - factors
not_f_cols <- unlist(list(d_cols, dt_cols, c_cols, i_cols))
f_cols <- setdiff(colnames(admissions), not_f_cols)
admissions <- mutate_at(admissions, as.factor, .vars=f_cols)
# Occupancy
occ$Date <- ymd(occ$Date)
c <- colnames(occ)
c <- c[c != "Date"]
occ <- mutate_at(occ, as.integer, .vars=c)
##### Wrangle
# Occupancy
process_datetime <- function(date, time){
time <- paste(substr(time, 5, 6),
substr(time, 7, 8),
sep=":")
time <- as.character(hm(time) - minutes(x=1))
return(paste(date, time, sep=" "))
}
occ <- gather(occ, 'Time', 'CareLevel', 3:26) %>%
select(c('Date', 'Time', 'CareLevel', 'covid'))
unlist(map2(occ$Date, occ$Time, process_datetime))
time <- 'LOC_0100'
time <- paste(substr(time, 5, 6),
substr(time, 7, 8),
sep=":")
time
hm(time)
hm(time) - minute(x=1)
hm(time) - minute(1)
hm(time) %m-% minutes(1)
hm(time) - minutes(1)
100-1
process_datetime <- function(date, time){
hour <- as.character(as.numeric(substr(time, 5, 6)) - 1)
time <- paste(hour, "59", sep=":")
return(paste(date, time, sep=" "))
}
unlist(map2(occ$Date, occ$Time, process_datetime))
process_datetime <- function(date, time){
hour <- as.character(as.numeric(substr(time, 5, 6)) - 1)
if(length(hour) == 1){
hour <- paste("0", hour, sep="")
}
time <- paste(hour, "59", sep=":")
return(paste(date, time, sep=" "))
}
unlist(map2(occ$Date, occ$Time, process_datetime))
occ$DateTime <- unlist(map2(occ$Date, occ$Time, process_datetime))
occ$DateTime <- ymd_hm(occ$DateTime)
occ
process_datetime("2020-03-17", "LOC_2400")
length("24")
process_datetime <- function(date, time){
hour <- as.character(as.numeric(substr(time, 5, 6)) - 1)
if(nchar(hour) == 1){
hour <- paste("0", hour, sep="")
}
time <- paste(hour, "59", sep=":")
return(paste(date, time, sep=" "))
}
occ$DateTime <- unlist(map2(occ$Date, occ$Time, process_datetime))
occ$DateTime <- ymd_hm(occ$DateTime)
occ
occ <- occ %>% select(c('DateTime', 'CareLevel', 'covid'))
occ$covid <- replace_na(occ$covid, 0)
occ <- drop_na(occ)
occ
occ %>% select(DateTime == ymd_hms("2020-03-17 23:59:00"))
occ %>% Filter(DateTime == ymd_hms("2020-03-17 23:59:00"))
occ %>% filter(DateTime == ymd_hms("2020-03-17 23:59:00"))
x <- occ %>% filter(DateTime == ymd_hms("2020-03-17 23:59:00"))
length(x)
nrow(x)
x$covid %>% sum()
sum(x$covid)
count(x$CareLevel)
summarise(x$CareLevel)
summarise(x)
x %>% filter(CareLevel == 3) %>% nrow()
x %>% filter((CareLevel == 3) && (covid == 1)) %>% nrow()
x
x %>% filter((CareLevel == 3) && (covid == 1))
x %>% filter(covid == 1)
x %>% filter((CareLevel == 3) & (covid == 1))
x %>% filter((CareLevel == 3) & (covid == 1)) %>% nrow()
care_n <- function(x){
total <- nrow(x)
total.covid <- sum(x$covid)
l3 <- x %>% filter(CareLevel == 3) %>% nrow()
l3.covid <- x %>% filter((CareLevel == 3) & (covid == 1)) %>% nrow()
return(Total=total,
TotalCovid=total.covid,
L3=l3,
L3Covid=l3.covid)
}
x
care_n(x)
#Total TotalCovid L3 L3Covid
care_n <- function(x){
total <- nrow(x)
total.covid <- sum(x$covid)
l3 <- x %>% filter(CareLevel == 3) %>% nrow()
l3.covid <- x %>% filter((CareLevel == 3) & (covid == 1)) %>% nrow()
return(list(Total=total,
TotalCovid=total.covid,
L3=l3,
L3Covid=l3.covid))
}
care_n(x)
occ %>% group_by(DateTime) %>% pmap(care_n)
occ %>% group_by(DateTime) %>% group_map(care_n)
care_n(x)
care_n <- function(x){
total <- nrow(x)
total.covid <- sum(x$covid)
l3 <- x %>% filter(CareLevel == 3) %>% nrow()
l3.covid <- x %>% filter((CareLevel == 3) & (covid == 1)) %>% nrow()
return(data.frame(list(Total=total,
TotalCovid=total.covid,
L3=l3,
L3Covid=l3.covid)))
}
care_n(x)
occ %>% group_by(DateTime) %>% group_map(care_n)
care_n <- function(x, ...){
total <- nrow(x)
total.covid <- sum(x$covid)
l3 <- x %>% filter(CareLevel == 3) %>% nrow()
l3.covid <- x %>% filter((CareLevel == 3) & (covid == 1)) %>% nrow()
return(data.frame(list(Total=total,
TotalCovid=total.covid,
L3=l3,
L3Covid=l3.covid)))
}
occ %>% group_by(DateTime) %>% group_map(care_n)
#Total TotalCovid L3 L3Covid
care_n <- function(x, ...){
total <- nrow(x)
total.covid <- sum(x$covid)
l3 <- x %>% filter(CareLevel == 3) %>% nrow()
l3.covid <- x %>% filter((CareLevel == 3) & (covid == 1)) %>% nrow()
return(data.frame(list(DateTime=x$DateTime,
Total=total,
TotalCovid=total.covid,
L3=l3,
L3Covid=l3.covid)))
}
occ %>% group_by(DateTime) %>% group_map(care_n)
care_n <- function(x, ...){
total <- nrow(x)
total.covid <- sum(x$covid)
l3 <- x %>% filter(CareLevel == 3) %>% nrow()
l3.covid <- x %>% filter((CareLevel == 3) & (covid == 1)) %>% nrow()
return(data.frame(list(Total=total,
TotalCovid=total.covid,
L3=l3,
L3Covid=l3.covid)))
}
occ %>% group_by(DateTime) %>% group_map(care_n)
x$DateTime
x$DateTime[1]
#Total TotalCovid L3 L3Covid
care_n <- function(x, ...){
dt <- x$DateTime[1]
total <- nrow(x)
total.covid <- sum(x$covid)
l3 <- x %>% filter(CareLevel == 3) %>% nrow()
l3.covid <- x %>% filter((CareLevel == 3) & (covid == 1)) %>% nrow()
return(data.frame(list(DateTime=dt,
Total=total,
TotalCovid=total.covid,
L3=l3,
L3Covid=l3.covid)))
}
occ %>% group_by(DateTime) %>% group_map(care_n)
x$DateTime[1]
x$DateTime[1][1]
x$DateTime[1][1][1]
#Total TotalCovid L3 L3Covid
care_n <- function(x, ...){
dt <- x$DateTime[1][1]
total <- nrow(x)
total.covid <- sum(x$covid)
l3 <- x %>% filter(CareLevel == 3) %>% nrow()
l3.covid <- x %>% filter((CareLevel == 3) & (covid == 1)) %>% nrow()
return(data.frame(list(DateTime=dt,
Total=total,
TotalCovid=total.covid,
L3=l3,
L3Covid=l3.covid)))
}
occ %>% group_by(DateTime) %>% group_map(care_n)
care_n(x)
#Total TotalCovid L3 L3Covid
care_n <- function(x, ...){
print(colnames(x))
#dt <- x$DateTime[1][1]
total <- nrow(x)
total.covid <- sum(x$covid)
l3 <- x %>% filter(CareLevel == 3) %>% nrow()
l3.covid <- x %>% filter((CareLevel == 3) & (covid == 1)) %>% nrow()
return(data.frame(list(DateTime=dt,
Total=total,
TotalCovid=total.covid,
L3=l3,
L3Covid=l3.covid)))
}
occ %>% group_by(DateTime) %>% group_map(care_n)
#Total TotalCovid L3 L3Covid
care_n <- function(x, ...){
print(colnames(x))
#dt <- x$DateTime[1][1]
total <- nrow(x)
total.covid <- sum(x$covid)
l3 <- x %>% filter(CareLevel == 3) %>% nrow()
l3.covid <- x %>% filter((CareLevel == 3) & (covid == 1)) %>% nrow()
return(data.frame(list(Total=total,
TotalCovid=total.covid,
L3=l3,
L3Covid=l3.covid)))
}
occ %>% group_by(DateTime) %>% group_map(care_n)
occ %>% filter(DateTime == ymd_hm("2020-03-18 23:59")) %>% group_by(DateTime) %>% group_map(care_n)
occ %>% filter(DateTime == ymd_hm("2020-03-18 23:59")) %>% group_by(DateTime) %>% group_modify(care_n)
occ %>% group_by(DateTime) %>% group_modify(care_n)
care_n <- function(x, ...){
total <- nrow(x)
total.covid <- sum(x$covid)
l3 <- x %>% filter(CareLevel == 3) %>% nrow()
l3.covid <- x %>% filter((CareLevel == 3) & (covid == 1)) %>% nrow()
return(data.frame(list(Total=total,
TotalCovid=total.covid,
L3=l3,
L3Covid=l3.covid)))
}
occ %>% group_by(DateTime) %>% group_modify(care_n)
occ.aggregates <- occ %>% group_by(DateTime) %>% group_modify(care_n)
care_n <- function(x, ...){
total <- nrow(x)
total.covid <- sum(x$covid)
non.covid <- total -  total.covid
l3 <- x %>% filter(CareLevel == 3) %>% nrow()
l3.covid <- x %>% filter((CareLevel == 3) & (covid == 1)) %>% nrow()
l3.non.covid = l3 - l3.covid
return(data.frame(list(Total=total,
TotalCovid=total.covid,
TotalNonCovid=non.covid,
L3=l3,
L3Covid=l3.covid,
L3NonCovid=l3.non.covid)))
}
occ.aggregates <- occ %>% group_by(DateTime) %>% group_modify(care_n)
occ.aggregates
ggplot(data=occ.aggregates, aes(DateTime, Total)) + geom_line()
ggplot(data=occ.aggregates, aes(DateTime, TotalCovid)) + geom_line()
ggplot(data=occ.aggregates, aes(DateTime, TotalL3Covid)) + geom_line()
ggplot(data=occ.aggregates, aes(DateTime, L3Covid)) + geom_line()
ggplot(data=occ.aggregates, aes(DateTime, L3NonCovid)) + geom_line()
occ.aggregates
occ.aggregates %>% gather("Variable", "Count", 2:)
occ.aggregates %>% gather("Variable", "Count", 2:6)
occ.aggregates %>% gather("Variable", "Count", 2:7)
occ.aggregates.tidy <- occ.aggregates %>% gather("Variable", "Count", 2:7)
ggplot(data=occ.aggregates.tidy, aes(DateTime, Count, colour=Variable)) + geom_line()
occ.aggregates.tidy %>% filter(Variable %in% c("L3", "L3Covid", "L3NonCovid")) %>% ggplot(aes(DateTime, Count, colour=Variable)) + geom_line()
occ.aggregates.tidy %>% filter(Variable %in% c("L3", "L3Covid", "L3NonCovid")) %>% ggplot(aes(DateTime, Count, colour=Variable)) + geom_line() + xlab('Date')
occ.aggregates.tidy %>% filter(Variable %in% c("L3", "L3Covid", "L3NonCovid")) %>% ggplot(aes(DateTime, Count, colour=Variable)) + geom_line() + xlab('Date') + theme_minimal()
occ.aggregates.tidy %>% filter(Variable %in% c("L3", "L3Covid", "L3NonCovid")) %>% ggplot(aes(DateTime, Count, colour=Variable)) + geom_line() + xlab('Date') + theme_minimal() + guides(fill=guide_legend(title=""))
occ.aggregates.tidy %>% filter(Variable %in% c("L3", "L3Covid", "L3NonCovid")) %>% ggplot(aes(DateTime, Count, colour=Variable)) + geom_line() + xlab('Date') + theme_minimal() + guides(fill=guide_legend(title=""))
occ.aggregates.tidy %>% filter(Variable %in% c("L3", "L3Covid", "L3NonCovid")) %>% ggplot(aes(DateTime, Count, colour=Variable)) + geom_line() + xlab('Date') + theme_minimal() + scale_fill_discrete(name="")
occ.aggregates.tidy %>% filter(Variable %in% c("L3", "L3Covid", "L3NonCovid")) %>% ggplot(aes(DateTime, Count, colour=Variable)) + geom_line() + xlab('Date') + theme_minimal() + labs(colour="")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('plotly')
runApp()
autoplot(occ.aggregates)
autoplot(occ.aggregates.tidy)
